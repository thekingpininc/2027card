// script.js
const gameBoard   = document.getElementById("gameBoard");
const timerDisplay = document.getElementById("timer");
const restartBtn   = document.getElementById("restartBtn");

const totalTime = 20;          // 게임 제한 시간(초)
const PREVIEW_SECONDS = 3;     // 미리보기 카운트다운 3→2→1
const GRID_COLS = 4;           // 한 줄 4장
const GRID_ROWS = 4;           // 총 4줄 (4×4)
const PAIRS = 8;               // 짝의 수(= 8쌍 → 16장)
const POOL_SIZE = 18;          // img/1.jpg ~ img/18.jpg

let countdown;                 // 본 게임 타이머 interval
let previewInterval;           // 미리보기 카운트다운 interval
let timeLeft = totalTime;

let flippedCards = [];
let lockBoard = false;
let matchedSets = 0;

/* ========== 유틸 ========== */
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// 1~18 중 랜덤 8장을 선택해 16장(짝 복제) 덱을 만들어 셔플
function makeDeck() {
  const pool = Array.from({ length: POOL_SIZE }, (_, i) => `img/${i + 1}.jpg`);
  const selected = shuffle(pool).slice(0, PAIRS);           // 무작위 8장 선택
  return shuffle(selected.flatMap(src => [src, src]));      // 짝 복제 후 셔플
}

// 요소의 margin을 포함한 바깥 높이 계산
function outerHeight(el) {
  if (!el) return 0;
  const cs = getComputedStyle(el);
  const mt = parseFloat(cs.marginTop) || 0;
  const mb = parseFloat(cs.marginBottom) || 0;
  return el.offsetHeight + mt + mb;
}

/**
 * 4×4 카드가 모든 환경에서 '스크롤 없이' 한 화면에 들어오도록
 * 카드 한 변(px)을 계산해서 grid 열 폭을 고정 설정
 */
function fitBoardToViewport() {
  const cs = getComputedStyle(gameBoard);
  const gap = parseFloat(cs.gap) || 0;
  const padH = (parseFloat(cs.paddingLeft) || 0) + (parseFloat(cs.paddingRight) || 0);
  const marV = (parseFloat(cs.marginTop) || 0) + (parseFloat(cs.marginBottom) || 0);
  const maxW = parseFloat(cs.maxWidth) || Infinity;

  const titleEl = document.querySelector('h1');
  const titleH = outerHeight(titleEl);
  const timerH = outerHeight(timerDisplay);
  const restartH = (restartBtn && restartBtn.style.display !== "none") ? outerHeight(restartBtn) : 0;

  // 화면 전체 높이에서 상단 요소와 게임보드 자체 마진을 제외한 높이
  const availableHeight = window.innerHeight - titleH - timerH - restartH - marV - 4; // 약간의 여유
  // 가로는 game-board의 max-width를 고려
  const availableWidth  = Math.min(window.innerWidth, isFinite(maxW) ? maxW : window.innerWidth) - padH;

  const sizeByWidth  = Math.floor((availableWidth  - gap * (GRID_COLS - 1)) / GRID_COLS);
  const sizeByHeight = Math.floor((availableHeight - gap * (GRID_ROWS - 1)) / GRID_ROWS);

  let size = Math.min(sizeByWidth, sizeByHeight);
  if (!isFinite(size) || size <= 0) size = 60;
  size = Math.max(40, size - 1); // 1px 여유로 스크롤 방지

  // 4×4 고정 그리드 적용
  gameBoard.style.gridTemplateColumns = `repeat(${GRID_COLS}, ${size}px)`;
}

/* ========== 게임 플로우 ========== */
function initGame() {
  // 타이머 정리
  clearInterval(countdown);
  clearInterval(previewInterval);

  // 상태 초기화
  gameBoard.innerHTML = "";
  flippedCards = [];
  lockBoard = true;
  matchedSets = 0;
  timeLeft = totalTime;
  timerDisplay.textContent = `미리보기 ${PREVIEW_SECONDS}초`;
  restartBtn.style.display = "none";

  // 덱 준비(1~18 중 랜덤 8장 → 16장)
  const shuffled = makeDeck();

  // 카드 생성
  shuffled.forEach(src => {
    const card = document.createElement("div");
    card.classList.add("card");
    card.dataset.image = src;

    card.innerHTML = `
      <div class="card-inner">
        <div class="back"><img src="img/back.png" alt="back"></div>
        <div class="front"><img src="${src}" alt="front"></div>
      </div>
    `;

    card.addEventListener("click", () => flipCard(card));
    gameBoard.appendChild(card);
  });

  // 화면 맞춤 계산
  fitBoardToViewport();

  // 전 카드 앞면 공개 → 3→2→1 카운트다운 → 다시 뒤집기 → START 오버레이
  const allCards = document.querySelectorAll(".card");
  setTimeout(() => {
    allCards.forEach(card => card.classList.add("flipped")); // 전체 앞면 공개
    startPreviewCountdown(allCards);
  }, 100);
}

function startPreviewCountdown(allCards) {
  let remain = PREVIEW_SECONDS; // 3
  timerDisplay.textContent = `미리보기 ${remain}초`;

  previewInterval = setInterval(() => {
    remain--;
    if (remain > 0) {
      timerDisplay.textContent = `미리보기 ${remain}초`; // 2, 1
    } else {
      clearInterval(previewInterval);
      // 미리보기 종료: 전부 다시 뒤집기
      allCards.forEach(card => card.classList.remove("flipped"));
      showStartOverlay(); // 오버레이가 사라지면 본게임 시작
    }
  }, 1000);
}

function showStartOverlay() {
  const overlay = document.createElement("div");
  overlay.id = "startOverlay";
  overlay.textContent = "START";
  document.body.appendChild(overlay);

  // CSS 애니메이션 종료 후 본게임 시작
  overlay.addEventListener("animationend", () => {
    overlay.remove();
    showStartMessage();
  }, { once: true });
}

function showStartMessage() {
  // 상단에 작은 START 문구는 표시하지 않음 → 바로 남은 시간 표기
  timerDisplay.textContent = `남은 시간: ${timeLeft}초`;
  lockBoard = false;   // 클릭 허용
  startTimer();        // 타이머 시작
}

function flipCard(card) {
  if (lockBoard || card.classList.contains("flipped")) return;

  card.classList.add("flipped");
  flippedCards.push(card);

  if (flippedCards.length === 2) {
    checkMatch();
  }
}

function checkMatch() {
  lockBoard = true;
  const [card1, card2] = flippedCards;
  if (card1.dataset.image === card2.dataset.image) {
    matchedSets++;
    flippedCards = [];
    lockBoard = false;
  } else {
    setTimeout(() => {
      card1.classList.remove("flipped");
      card2.classList.remove("flipped");
      flippedCards = [];
      lockBoard = false;
    }, 800);
  }
}

function startTimer() {
  clearInterval(countdown);
  countdown = setInterval(() => {
    timeLeft--;
    timerDisplay.textContent = `남은 시간: ${timeLeft}초`;
    if (timeLeft <= 0) {
      clearInterval(countdown);
      endGame();
    }
  }, 1000);
}

function endGame() {
  lockBoard = true;
  timerDisplay.textContent = `시간 종료! ${matchedSets}세트 성공!`;
  restartBtn.style.display = "inline-block";
  fitBoardToViewport(); // 버튼 표시로 가용 높이 변동 → 즉시 재계산
}

/* 이벤트 */
restartBtn.addEventListener("click", initGame);
window.addEventListener("resize", fitBoardToViewport);

/* 시작 */
initGame();
